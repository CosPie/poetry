/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTangPoetryArgs } from "./CreateTangPoetryArgs";
import { UpdateTangPoetryArgs } from "./UpdateTangPoetryArgs";
import { DeleteTangPoetryArgs } from "./DeleteTangPoetryArgs";
import { TangPoetryCountArgs } from "./TangPoetryCountArgs";
import { TangPoetryFindManyArgs } from "./TangPoetryFindManyArgs";
import { TangPoetryFindUniqueArgs } from "./TangPoetryFindUniqueArgs";
import { TangPoetry } from "./TangPoetry";
import { TangPoetryService } from "../tangPoetry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TangPoetry)
export class TangPoetryResolverBase {
  constructor(
    protected readonly service: TangPoetryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "read",
    possession: "any",
  })
  async _tangPoetriesMeta(
    @graphql.Args() args: TangPoetryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TangPoetry])
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "read",
    possession: "any",
  })
  async tangPoetries(
    @graphql.Args() args: TangPoetryFindManyArgs
  ): Promise<TangPoetry[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TangPoetry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "read",
    possession: "own",
  })
  async tangPoetry(
    @graphql.Args() args: TangPoetryFindUniqueArgs
  ): Promise<TangPoetry | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TangPoetry)
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "create",
    possession: "any",
  })
  async createTangPoetry(
    @graphql.Args() args: CreateTangPoetryArgs
  ): Promise<TangPoetry> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TangPoetry)
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "update",
    possession: "any",
  })
  async updateTangPoetry(
    @graphql.Args() args: UpdateTangPoetryArgs
  ): Promise<TangPoetry | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TangPoetry)
  @nestAccessControl.UseRoles({
    resource: "TangPoetry",
    action: "delete",
    possession: "any",
  })
  async deleteTangPoetry(
    @graphql.Args() args: DeleteTangPoetryArgs
  ): Promise<TangPoetry | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
